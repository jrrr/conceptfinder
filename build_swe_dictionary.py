#!/usr/bin/env python

import sys
import os
import string
import pickle
import nltk

# path to the directory containing MRSTY.RRF and MRCONSO.RRF from UMLS
UMLS_path = 'UMLS'

# path to the file containing Swedish SNOMED CT concept terms
snomed_path = 'SnomedCT_swe/Full/Terminology/sct2_Description_Full-sv_SE1000052_20191130.txt'

# path to the file containing word variants, generated by wordvariants.py
wordvariants_path = 'wordvariants.pkl'

# UMLS semantic groups to include
target_tuis = {
    'T047', # Disease or Syndrome
    'T184', # Sign or Symptom
    'T046', # Pathologic Function
    'T200', # Clinical Drug
    'T121', # Pharmacologic Substance
    'T195', # Antibiotic
    'T048', # Mental or Behavioral Dysfunction
}

trans = str.maketrans('', '', string.punctuation)
with open(wordvariants_path, 'rb') as f:
    wordvariants = pickle.load(f)

def generate_variants(word):
    return wordvariants[word] if word in wordvariants else {word}

def make_termstr(term):
    tokens = [token.lower().translate(trans)
        for token in nltk.word_tokenize(term)]
    tokens = [generate_variants(token)
        for token in tokens if token != '']
    return ' '.join([','.join(variants) for variants in tokens])

if len(sys.argv) != 2:
    print('usage: {} <out>'.format(sys.argv[0]))
    quit()
outfile = sys.argv[1]

matching_cuis = set()
with open(os.path.join(UMLS_path, 'MRSTY.RRF'), 'r') as f:
    for line in f:
        cui, tui = line.split('|')[0:2]
        if tui in target_tuis:
            matching_cuis.add(cui)

snomed_concepts = dict()
with open(snomed_path, 'r', encoding='utf-8') as f:
    f.readline() # first line is header
    for line in f:
        parts = line.strip().split('\t')
        sid = parts[4]
        term = parts[7]
        if not sid in snomed_concepts:
            snomed_concepts[sid] = set()
        snomed_concepts[sid].add(make_termstr(term))

concepts = dict()
with open(os.path.join(UMLS_path, 'MRCONSO.RRF'), 'r', encoding='utf-8') as f:
    for line in f:
        parts = line.strip().split('|')
        cui = parts[0]
        sid = parts[9]
        source = parts[11]
        term = parts[14]

        if not cui in matching_cuis:
            continue
        if sid in snomed_concepts and source == 'SNOMEDCT_US':
            concepts[cui] = concepts.setdefault(cui, set()).union(snomed_concepts[sid])
        if source == 'MSHSWE' or source == 'ICPCSWE':
            concepts[cui] = concepts.setdefault(cui, set()).union({make_termstr(term)})

with open(outfile, 'w', encoding='utf-8') as f:
    for (cui, term_set) in concepts.items():
        for termstr in term_set:
            f.write(f'{cui} 1 {termstr}\n')
